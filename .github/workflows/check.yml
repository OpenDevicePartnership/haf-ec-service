# This workflow runs whenever a PR is opened or updated, or a commit is pushed to main. It runs
# several checks:
# - fmt: checks that the code is formatted according to rustfmt
# - clippy: checks that the code does not contain any clippy warnings
# - doc: checks that the code can be documented without errors
# - hack: check combinations of feature flags
# - msrv: check that the msrv specified in the crate is correct
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches: [main]
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR. Ensures that
# we don't waste CI time, and returns results quicker https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: check
jobs:
  test:
    runs-on: ubuntu-latest
    name: stable / test
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: cargo test
        run: cargo test

  fmt:
    runs-on: ubuntu-latest
    name: stable / fmt
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: cargo fmt --check
        run: cargo fmt --check

  clippy:
    runs-on: ubuntu-latest
    name: clippy
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: cargo clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-check'
          clippy_flags: --
          github_token: ${{ secrets.GITHUB_TOKEN }}

  doc:
    # run docs generation on nightly rather than stable. This enables features like
    # https://doc.rust-lang.org/beta/unstable-book/language-features/doc-cfg.html which allows an
    # API be documented as only available in some specific platforms.
    runs-on: ubuntu-latest
    name: nightly / doc
    steps:
      - uses: actions/checkout@v4
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: aarch64-unknown-none
      - name: cargo doc
        run: cargo doc --no-deps --all-features --target=aarch64-unknown-none
        env:
          RUSTDOCFLAGS: --cfg docsrs

  hack:
    # cargo-hack checks combinations of feature flags to ensure that features are all additive
    # which is required for feature unification
    runs-on: ubuntu-latest
    name: ubuntu / stable / features
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-none
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      # intentionally no target specifier; see https://github.com/jonhoo/rust-ci-conf/pull/4
      # --feature-powerset runs for every combination of features
      - name: cargo hack (host platform target)
        run: cargo hack check --feature-powerset --skip baremetal,time-driver
      - name: cargo hack (baremetal platform target)
        run: cargo hack check --feature-powerset --target=aarch64-unknown-none
  deny:
    # cargo-deny checks licenses, advisories, sources, and bans for
    # our dependencies.
    runs-on: ubuntu-latest
    name: ubuntu / stable / deny
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo install cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          log-level: warn
          manifest-path: ./Cargo.toml
          command: check
          arguments: --all-features --target=aarch64-unknown-none

  msrv:
    # check that we can build using the minimal rust version that is specified by this crate
    runs-on: ubuntu-latest
    # we use a matrix here just because env can't be used in job names
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      fail-fast: false
      matrix:
        msrv: ["1.85"] # minimum to build the aarch64-rt crate
    name: ubuntu / ${{ matrix.msrv }}
    steps:
      - uses: actions/checkout@v4
      - name: Install ${{ matrix.msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}
          targets: aarch64-unknown-none
      - name: cargo +${{ matrix.msrv }} check
        run: cargo check --all-features --target=aarch64-unknown-none
